```js exec

  import ReconjsBlurb from '../../data/descriptions/ReconjsBlurb.svx'

```

### ReconJS
	
#### Description
	
<ReconjsBlurb />
	
#### Notable Tech Used
	
- **Karma** - testing
- **Jasmine** - testing
- **AcornJS** - parser
- **RollupJS** - bundler
	
#### Overview

I originally tried building this project from absolute scratch. I wanted to make the package. as small as possible to make it easy to throw into web apps like [TiddlyWiki](https://tiddlywiki.com) where users have opportunities to run arbitrary foreign code.
	
That meant building my own parser and tokenizer. I thought that I would not need all the data of a full-blown abstract syntax tree.
	
Ultimately, scope was too complex sort out without a full-blown abstract syntax tree. So I had to abandon all the work (and tests) I'd done and start over.
	
This time I used AcornJS to build the AST, and built ReconJS directly on top of that.

#### Smooth Sailing
	
Once I had Acorn building the AST, it was pretty straightforward. Prior to that, writing lots of tests kept the project manageable for quite some time (until I hit scope). 
	
#### Pain Points
	
- **Scope*
    - Scope is simply too complex to model without an AST. Without scope modeling, you can never actually whitelist a declared identifier because you can't tell what uses of that identifier fall outside the declaration scope. So the whole project is fundamentally unfeasible without out. Once you have an AST though, scope becomes manageable.
- **Rollup and Module Bundling**
    - This was my first experience with Rollup in particular and module bundling more generally. The whole issue of commonjs type modules vs ecmascript modules is a royal pain, particularly because some formats will work better with some bundlers than others.

#### Lessons Learned
	
- **Complexity**
    - Some kinds of complex systems can be developed stochastically. Parsing is not one of these. If a system needs to be cohesively designed rather than ad hoc and evolved, you must be teleological about it.
	
#### To Do
	
Support for ES7+.

Using ReconJS to check files, as a command line tool, rather than using it programmatically and passing in strings of code.
